shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dateInput("date","Date")
runApp()
pd<-readline(prompt="Enter an Date(yyyy-mm-dd): ")
predictionDate<-as.Date(pd)
class(predictionDate)
predictionDate
temp_data1 <- read.csv("bangalore_2016_csv.csv" , sep = ",")
total_data1<-temp_data1[, seq(1,3)]
names(total_data1)<- c('DATE','TMAX','TMIN')
total_data1
total_data1$TMAX<-as.numeric(substr(as.character(total_data1$TMAX),1,2))
total_data1$TMIN<-as.numeric(substr(as.character(total_data1$TMIN),1,2))
total_data1
cur_year_data<-total_data1[as.numeric(substr(y<-as.character((total_data1$DATE)),1,4)) %in% 2016,]
cur_year_data
#getting the date format from the curr year data
cur_month_date<-seq(predictionDate-7, by = 'day',length.out = 7)
days1<-as.numeric(paste(substr(y<-as.character(cur_month_date),6,7),substr(y<-as.character(cur_month_date),9,nchar(y)),sep=''))
#matching the data
#var<- filter(prev_year_data,DATE=(DATE%/%10000==2015))
cur_year_data$DATE<-as.numeric(substr(y<-as.character(cur_year_data$DATE),5,nchar(y)))
CD<-cur_year_data[cur_year_data$DATE %in% days1,c(2,3)]
CD
as.data.frame.matrix(CD)
CD[1,1]
#centigarde conversion
for(i in 1:7)
{
CD[i,1]=((as.numeric(CD[i,1])-32)*(5/9))
CD[i,2]=((as.numeric(CD[i,2])-32)*(5/9))
}
as.data.frame.matrix(CD)
currYearData<-array(CD[1:2])
names(currYearData)<- c('TMAX','TMIN')
################################################################################
#previous years data - actual temperature from Accuweather API
temp_data <- read.csv("Bangalore_2015_csv_02.csv" , sep = ",")
total_data<-temp_data[, seq(1,3)]
names(total_data)<- c('DATE','TMAX','TMIN')
total_data
total_data$TMAX<-as.numeric(substr(as.character(total_data$TMAX),1,2))
total_data$TMIN<-as.numeric(substr(as.character(total_data$TMIN),1,2))
total_data
prev_year_data<-total_data[as.numeric(substr(y<-as.character((total_data$DATE)),1,4)) %in% 2015,]
prev_year_data
#getting the date format from the previous year data
prev_month_date<-seq(predictionDate-7, by = 'day',length.out = 14)
days<-as.numeric(paste(substr(y<-as.character(prev_month_date),6,7),substr(y<-as.character(prev_month_date),9,nchar(y)),sep=''))
#matching the data
#var<- filter(prev_year_data,DATE=(DATE%/%10000==2015))
prev_year_data$DATE<-as.numeric(substr(y<-as.character(prev_year_data$DATE),5,nchar(y)))
PD<-prev_year_data[prev_year_data$DATE %in% days,c(2,3)]
as.data.frame.matrix(PD)
################################################################################
#dividing previous year data into 8 sliding window algorithms
x<-PD
y <- rollapply(x, width=7, FUN=function(x) {print(x);},align = "right")
as.data.frame.matrix(y)
sliding_windows <- array(, dim=c(7,2,8))
j<-1
for(i in 1:8)
{
sliding_windows[,j,i]=y[i,1:7]
sliding_windows[,j+1,i]=y[i,8:14]
sliding_windows[,,i]
}
#conversion to centigrade
for(i in 1:8)
{
for(j in 1:7)
{
for(k in 1:2)
{
sliding_windows[j,k,i]=(as.numeric(sliding_windows[j,k,i]-32)*(5/9))
}
}
}
###############################################################################
#converting the current year dataframe to matrix
curr <- array(, dim=c(7,2,1))
for(i in 1:7)
{
for(j in 1:2)
{
curr[i,j,1]=as.numeric(currYearData[i,j])
}
}
#ED_matrices contains the euclidean distances - 8 in number
ED_matrices <- array(, dim=c(7,1,8))
#function to find the euclidian distance
euclidian_diat<- function(x1,x2,y1,y2){
res<- sqrt(((x1-x2)^2)+((y1-y2)^2))
return(res)
}
for(i in 1:8)
{
for(j in 1:7)
{
ED_matrices[j,1,i]<-euclidian_diat(curr[j,1,1],sliding_windows[j,1,i],curr[j,2,1],sliding_windows[j,2,i])
}
}
#contains the mean of the each euclidean matrix
ED_means<- array(,dim = c(8,1))
for (i in 1:8) {
ED_means[i,1]=mean(ED_matrices[,,i])
}
#finding the min(ED_means)
matched_window_position=which(ED_means==min(ED_means))
#matched_window
sliding_windows[,,matched_window_position]
matched_window=array(,dim = c(7,2))
matched_window=sliding_windows[,,matched_window_position]
matched_window
################################################################################
#variation
vc <- array(, dim = c(6,2))
vp <- array(, dim=c(6,2))
for(i in 1:6)
{
for(j in 1:2)
{
vc[i,j]=curr[i,j,1]-curr[i+1,j,1]
}
}
vc
for(i in 1:6)
{
for(j in 1:2)
{
vp[i,j]=matched_window[i,j]-matched_window[i+1,j]
}
}
vp
class(vp)
colnames(vc)<-c('TMAX','TMIN')
colnames(vp)<-c('TMAX','TMIN')
colnames(curr) <- c('TMAX','TMIN')
as.data.frame(vc)
vc[,1]
#mean of the variations
mean_TMAX1=mean(vc[,1])
mean_TMAX2=mean(vp[,1])
mean_TMIN1=mean(vc[,2])
mean_TMIN2=mean(vp[,2])
v_TMAX=(mean_TMAX1+mean_TMAX2)/2
v_TMIN=(mean_TMIN1+mean_TMIN2)/2
res_TMAX <- as.data.frame(matrix(curr[,1,1]+v_TMAX, ncol = 1, nrow = 7))
is.data.frame(res_TMAX)
res_TMIN <- as.data.frame(matrix(curr[,2,1]+v_TMIN, ncol = 1, nrow = 7))
res_TMAX
res_TMIN
colnames(res_TMAX)<-c('TMAX')
colnames(res_TMIN)<-c('TMIN')
################################################################################
#Actual Temperatures
actual_temp_data<- read.csv("bangalore_2016_csv.csv" , sep = ",")
actual_total_data<-actual_temp_data[, seq(1,3)]
names(actual_total_data)<- c('DATE','TMAX','TMIN')
actual_total_data
actual_total_data$TMAX<-as.numeric(substr(as.character(actual_total_data$TMAX),1,2))
actual_total_data$TMIN<-as.numeric(substr(as.character(actual_total_data$TMIN),1,2))
actual_total_data
actual_cur_year_data<-actual_total_data[as.numeric(substr(y<-as.character((actual_total_data$DATE)),1,4)) %in% 2016,]
actual_cur_year_data
#getting the date format from the curr year data
actual_cur_month_date<-seq(predictionDate, by = 'day',length.out = 7)
actual_days<-as.numeric(paste(substr(y<-as.character(actual_cur_month_date),6,7),substr(y<-as.character(actual_cur_month_date),9,nchar(y)),sep=''))
#matching the data
#var<- filter(prev_year_data,DATE=(DATE%/%10000==2015))
actual_cur_year_data$DATE<-as.numeric(substr(y<-as.character(actual_cur_year_data$DATE),5,nchar(y)))
actual_CD<-actual_cur_year_data[actual_cur_year_data$DATE %in% actual_days,c(2,3)]
as.data.frame.matrix(actual_CD)
#centigarde conversion
for(i in 1:7)
{
actual_CD[i,1]=((as.numeric(actual_CD[i,1])-32)*(5/9))
actual_CD[i,2]=((as.numeric(actual_CD[i,2])-32)*(5/9))
}
as.data.frame.matrix(actual_CD)
actual_currYearData<-array(actual_CD[1:2])
names(actual_currYearData)<- c('Actual_TMAX','Actual_TMIN')
actual_currYearData
################################################################################
dates<- seq(predictionDate, by = 'day',length.out = 7)
resultant_data_frame<-cbind(dates,res_TMAX,res_TMIN,actual_currYearData$Actual_TMAX,actual_currYearData$Actual_TMIN)
colnames(resultant_data_frame)<-c('Dates','P_TMAX','P_TMIN','A_TMAX','A_TMIN')
resultant_data_frame
write.csv(resultant_data_frame, file = "predicted_temperature_data.csv")
predicted_temperature=read.csv("predicted_temperature_data.csv")
str(predicted_temperature)
predicted_temperature
#drawing the comparision Plot
f <- list(
family = "Courier New, monospace",
size = 18,
color = "Blue"
)
x <- list(
title = "Dates",
titlefont = f
)
y <- list(
title = "Temperature",
titlefont = f
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
toupper('kjahf')
tolower('HhsSKF')
library("stringr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
str_to_title('hsdkjfh sdhgjsdhgl')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Sys.Date()
substr(y<-as.character(Sys.Date(),5,nchar(y))
)
substr(y<-as.character(Sys.Date()),5,nchar(y))
paste('2017',substr(y<-as.character(Sys.Date()),5,nchar(y)),sep = '')
as.Date(paste('2017',substr(y<-as.character(Sys.Date()),5,nchar(y)),sep = ''))
as.Date(paste('2017',substr(y<-as.character(Sys.Date()),5,nchar(y)),sep = ''))+1
runApp()
runApp()
runApp()
d<-paste(input$year,substr(y<-as.character(Sys.Date()),5,nchar(y)),sep = '')
d<-paste('2017',substr(y<-as.character(Sys.Date()),5,nchar(y)),sep = '')
format(as.Date(d),"%d %b %Y %A")
runApp()
as.character(format(as.Date(d),"%d %b %Y %A"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
