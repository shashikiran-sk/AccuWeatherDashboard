{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\nlibrary(RJSONIO)\nlibrary(shiny)\nlibrary(plotly)\nlibrary(DT)\nlibrary(plyr)\nlibrary(dplyr)\nlibrary(zoo)\nlibrary(stringr)\nshinyServer(function(input, output) {\n  values <- reactiveValues(x = NULL)\n  observeEvent(input$Go, {\n    maxfile<-paste(\"TMAX\",input$location,paste(input$year,'.csv',sep=''),sep = '/')\n    filename<-paste(toupper(input$location),'_',input$year,'_TMIN.csv',sep='')\n    minfile<-paste(\"TMIN\",input$location,filename,sep = '/')\n    writeLines(maxfile)\n    writeLines(minfile)\n    if(file.exists(maxfile)){\n      values$x <- read.csv(maxfile,header = FALSE,sep=',')\n    }\n    if(file.exists(minfile)){\n      values$y <- read.csv(minfile,header = FALSE,sep=',')\n    }\n  })\n\n  output$Month <- renderPlotly({\n    if(input$val==T){\n      plot_ly(d<-filter(values$x,Date=(Date%/%100==input$month)),x=d$Date%%100,y=d$Tmax,text=paste(\"Date:\",d$Date%%100))%>%\n        layout(xaxis = list(title=\"DATE\",showgrid=T),yaxis=list(title=\"MAX TEMPERATURE(Tmax in deg)\"))\n    }\n    else\n      plot_ly(values$x,x=values$x$Date/100,y=values$x$Tmax,group=values$x$Date%%100,mode=\"markers\")%>%\n      layout(xaxis = list(title=\"DATE\",showgrid=T),yaxis=list(title=\"MAX TEMPERATURE(Tmax in deg)\"))\n  })\n  \n  observeEvent(input$Go, {\n    names(values$x)<-c('ID','Date','Tmax')\n    values$x$Date<-as.numeric(substr(y<-as.character(values$x$Date),5,nchar(y)))\n    currentdate<-as.numeric(substr(y<-as.character(Sys.Date()),9,nchar(y)))\n    currentmonth<-as.numeric(substr(y<-as.character(Sys.Date()),6,7))\n    alldatesmax<-filter(values$x,Date=(Date%%100==currentdate))\n    maxtemp<-filter(alldatesmax,Date=(Date%/%100==currentmonth))\n    maxtemp<-maxtemp$Tmax\n    maxtemp\n    \n    names(values$y)<-c('ID','Date','Tmax')\n    values$y$Date<-as.numeric(substr(y<-as.character(values$y$Date),5,nchar(y)))\n    alldatesmin<-filter(values$y,Date=(Date%%100==currentdate))\n    mintemp<-filter(alldatesmin,Date=(Date%/%100==currentmonth))\n    mintemp<-mintemp$Tmax\n    mintemp\n    \n    f<-seq(Sys.Date(), by = \"day\", length.out = 7)\n    #weekdaylist<-as.numeric(substr(y<-as.character(f),9,nchar(y)))\n    #weekdaymonth<-Unique(as.numeric(substr(y<-as.character(f),6,7)))\n    days=filter(values$x,Date=(Date%/%100==input$month))\n    days=days$Date\n    weekmaxtemp<-values$x[values$x$Date %in% days,3]\n    weekmintemp<-values$y[values$y$Date %in% days,3]\n    \n    \n#      for(i in 0:7){\n#        output$Date<-renderText({\n#        d<-paste(input$year,substr(y<-as.character(Sys.Date()),5,nchar(y)),sep = '')+i\n#          as.character(format(as.Date(d),\"%d %b %Y %A\"))\n#        })\n#     }\n      output$year<-renderText({\n        input$year\n      })\n      \n    \n    output$curimage<-myimagefunc(maxtemp)\n    output$image2<-myimagefunc(weekmaxtemp[2])\n    output$image3<-myimagefunc(weekmaxtemp[3])\n    output$image4<-myimagefunc(weekmaxtemp[4])\n    output$image5<-myimagefunc(weekmaxtemp[5])\n    output$image6<-myimagefunc(weekmaxtemp[6])\n    output$image7<-myimagefunc(weekmaxtemp[7])\n    \n    output$mintemp<-mytempfunc(mintemp)\n    output$mintemp_2<-mytempfunc(weekmintemp[2])\n    output$mintemp_3<-mytempfunc(weekmintemp[3])\n    output$mintemp_4<-mytempfunc(weekmintemp[4])\n    output$mintemp_5<-mytempfunc(weekmintemp[5])\n    output$mintemp_6<-mytempfunc(weekmintemp[6])\n    output$mintemp_7<-mytempfunc(weekmintemp[7])\n\n    output$maxtemp<-mytempfunc(maxtemp)    \n    output$temp_2<-mytempfunc(weekmaxtemp[2])\n    output$temp_3<-mytempfunc(weekmaxtemp[3])\n    output$temp_4<-mytempfunc(weekmaxtemp[4])\n    output$temp_5<-mytempfunc(weekmaxtemp[5])\n    output$temp_6<-mytempfunc(weekmaxtemp[6])\n    output$temp_7<-mytempfunc(weekmaxtemp[7])\n    \n\n    output$temp1<-mytempfunc(weekmaxtemp[1])\n    output$temp2<-mytempfunc(weekmaxtemp[2])\n    output$temp3<-mytempfunc(weekmaxtemp[3])\n    output$temp4<-mytempfunc(weekmaxtemp[4])\n    output$temp5<-mytempfunc(weekmaxtemp[5])\n    output$temp6<-mytempfunc(weekmaxtemp[6])\n    output$temp7<-mytempfunc(weekmaxtemp[7])\n    output$temp8<-mytempfunc(weekmaxtemp[8])\n    output$temp9<-mytempfunc(weekmaxtemp[9])\n    output$temp10<-mytempfunc(weekmaxtemp[10])\n    output$temp11<-mytempfunc(weekmaxtemp[11])\n    output$temp12<-mytempfunc(weekmaxtemp[12])\n    output$temp13<-mytempfunc(weekmaxtemp[13])\n    output$temp14<-mytempfunc(weekmaxtemp[14])\n    output$temp15<-mytempfunc(weekmaxtemp[15])\n    output$temp16<-mytempfunc(weekmaxtemp[16])\n    output$temp17<-mytempfunc(weekmaxtemp[17])\n    output$temp18<-mytempfunc(weekmaxtemp[18])\n    output$temp19<-mytempfunc(weekmaxtemp[19])\n    output$temp20<-mytempfunc(weekmaxtemp[20])\n    output$temp21<-mytempfunc(weekmaxtemp[21])\n    output$temp22<-mytempfunc(weekmaxtemp[22])\n    output$temp23<-mytempfunc(weekmaxtemp[23])\n    output$temp24<-mytempfunc(weekmaxtemp[24])\n    output$temp25<-mytempfunc(weekmaxtemp[25])\n    output$temp26<-mytempfunc(weekmaxtemp[26])\n    output$temp27<-mytempfunc(weekmaxtemp[27])\n    output$temp28<-mytempfunc(weekmaxtemp[28])\n    output$temp29<-mytempfunc(weekmaxtemp[29])\n    output$temp30<-mytempfunc(weekmaxtemp[30])\n    output$temp31<-mytempfunc(weekmaxtemp[31])\n    \n    output$mintemp1<-mytempfunc(weekmintemp[1])\n    output$mintemp2<-mytempfunc(weekmintemp[2])\n    output$mintemp3<-mytempfunc(weekmintemp[3])\n    output$mintemp4<-mytempfunc(weekmintemp[4])\n    output$mintemp5<-mytempfunc(weekmintemp[5])\n    output$mintemp6<-mytempfunc(weekmintemp[6])\n    output$mintemp7<-mytempfunc(weekmintemp[7])\n    output$mintemp8<-mytempfunc(weekmintemp[8])\n    output$mintemp9<-mytempfunc(weekmintemp[9])\n    output$mintemp10<-mytempfunc(weekmintemp[10])\n    output$mintemp11<-mytempfunc(weekmintemp[11])\n    output$mintemp12<-mytempfunc(weekmintemp[12])\n    output$mintemp13<-mytempfunc(weekmintemp[13])\n    output$mintemp14<-mytempfunc(weekmintemp[14])\n    output$mintemp15<-mytempfunc(weekmintemp[15])\n    output$mintemp16<-mytempfunc(weekmintemp[16])\n    output$mintemp17<-mytempfunc(weekmintemp[17])\n    output$mintemp18<-mytempfunc(weekmintemp[18])\n    output$mintemp19<-mytempfunc(weekmintemp[19])\n    output$mintemp20<-mytempfunc(weekmintemp[20])\n    output$mintemp21<-mytempfunc(weekmintemp[21])\n    output$mintemp22<-mytempfunc(weekmintemp[22])\n    output$mintemp23<-mytempfunc(weekmintemp[23])\n    output$mintemp24<-mytempfunc(weekmintemp[24])\n    output$mintemp25<-mytempfunc(weekmintemp[25])\n    output$mintemp26<-mytempfunc(weekmintemp[26])\n    output$mintemp27<-mytempfunc(weekmintemp[27])\n    output$mintemp28<-mytempfunc(weekmintemp[28])\n    output$mintemp29<-mytempfunc(weekmintemp[29])\n    output$mintemp30<-mytempfunc(weekmintemp[30])\n    output$mintemp31<-mytempfunc(weekmintemp[31])\n    \n  })\n  \n  \n  mytempfunc<-function(temp){\n    temp_sel<-renderText({\n      paste(round(temp,2),\"Â°C\")\n    })\n    return(temp_sel)\n  }\n  \n  myimagefunc<-function(temp){    \n    if(temp>20){\n      image_sel<-renderImage({\n        filename <- normalizePath(file.path('www/partly_cloudy.png'))\n        list(src = filename,\n             alt = paste(\"Image Sunny\"),\n             height=100,width=100\n        )\n      },deleteFile = FALSE)\n    }\n    else{\n      image_sel<-renderImage({\n        filename <- normalizePath(file.path('www/sunny.png'))\n        list(src = filename,\n             alt = paste(\"Image cool\"),\n             height=100,width=100\n        )\n      },deleteFile = FALSE)\n    }\n    return(image_sel)\n  }\n  ###Sliding Window Algorithm\n  observeEvent(input$Goo,{\n    #reading the date\n    \n    prediction_date<-input$Date\n    predictionDate<-as.Date(prediction_date)\n    class(predictionDate)\n    predictionDate\n    \n    #################################################################################\n    #current temperature\n    temp_data1 <- read.csv(\"bangalore_2016_csv.csv\" , sep = \",\") \n    total_data1<-temp_data1[, seq(1,3)]\n    names(total_data1)<- c('DATE','TMAX','TMIN')\n    total_data1\n    total_data1$TMAX<-as.numeric(substr(as.character(total_data1$TMAX),1,2))\n    total_data1$TMIN<-as.numeric(substr(as.character(total_data1$TMIN),1,2))\n    total_data1\n    \n    cur_year_data<-total_data1[as.numeric(substr(y<-as.character((total_data1$DATE)),1,4)) %in% 2016,]\n    cur_year_data\n    \n    \n    #getting the date format from the curr year data\n    cur_month_date<-seq(predictionDate-7, by = 'day',length.out = 7)\n    days1<-as.numeric(paste(substr(y<-as.character(cur_month_date),6,7),substr(y<-as.character(cur_month_date),9,nchar(y)),sep=''))\n    \n    #matching the data\n    #var<- filter(prev_year_data,DATE=(DATE%/%10000==2015))\n    cur_year_data$DATE<-as.numeric(substr(y<-as.character(cur_year_data$DATE),5,nchar(y)))\n    CD<-cur_year_data[cur_year_data$DATE %in% days1,c(2,3)]\n    CD\n    as.data.frame.matrix(CD)\n    CD[1,1]\n    \n    #centigarde conversion\n    for(i in 1:7)\n    {\n      CD[i,1]=((as.numeric(CD[i,1])-32)*(5/9))\n      CD[i,2]=((as.numeric(CD[i,2])-32)*(5/9))\n    }\n    as.data.frame.matrix(CD)\n    currYearData<-array(CD[1:2])\n    names(currYearData)<- c('TMAX','TMIN')\n    \n    ################################################################################\n    #previous years data - actual temperature from Accuweather API\n    temp_data <- read.csv(\"Bangalore_2015_csv_02.csv\" , sep = \",\") \n    total_data<-temp_data[, seq(1,3)]\n    names(total_data)<- c('DATE','TMAX','TMIN')\n    total_data\n    total_data$TMAX<-as.numeric(substr(as.character(total_data$TMAX),1,2))\n    total_data$TMIN<-as.numeric(substr(as.character(total_data$TMIN),1,2))\n    total_data\n    \n    prev_year_data<-total_data[as.numeric(substr(y<-as.character((total_data$DATE)),1,4)) %in% 2015,]\n    prev_year_data\n    \n    #getting the date format from the previous year data\n    prev_month_date<-seq(predictionDate-7, by = 'day',length.out = 14)\n    days<-as.numeric(paste(substr(y<-as.character(prev_month_date),6,7),substr(y<-as.character(prev_month_date),9,nchar(y)),sep=''))\n    \n    #matching the data\n    #var<- filter(prev_year_data,DATE=(DATE%/%10000==2015))\n    prev_year_data$DATE<-as.numeric(substr(y<-as.character(prev_year_data$DATE),5,nchar(y)))\n    PD<-prev_year_data[prev_year_data$DATE %in% days,c(2,3)]\n    as.data.frame.matrix(PD)\n    \n    ################################################################################\n    #dividing previous year data into 8 sliding window algorithms\n    x<-PD\n    y <- rollapply(x, width=7, FUN=function(x) {print(x);},align = \"right\")\n    as.data.frame.matrix(y)\n    \n    sliding_windows <- array(, dim=c(7,2,8))\n    j<-1\n    for(i in 1:8)\n    {\n      sliding_windows[,j,i]=y[i,1:7]\n      sliding_windows[,j+1,i]=y[i,8:14]\n      sliding_windows[,,i]\n    }\n    \n    \n    #conversion to centigrade\n    for(i in 1:8)\n    {\n      for(j in 1:7)\n      {\n        for(k in 1:2)\n        {\n          sliding_windows[j,k,i]=(as.numeric(sliding_windows[j,k,i]-32)*(5/9))\n        }\n      }\n    }\n    \n    ###############################################################################\n    #converting the current year dataframe to matrix\n    curr <- array(, dim=c(7,2,1))\n    for(i in 1:7)\n    {\n      for(j in 1:2)\n      {\n        curr[i,j,1]=as.numeric(currYearData[i,j])\n      }\n    }\n    \n    #ED_matrices contains the euclidean distances - 8 in number\n    ED_matrices <- array(, dim=c(7,1,8))\n    \n    #function to find the euclidian distance\n    euclidian_diat<- function(x1,x2,y1,y2){\n      res<- sqrt(((x1-x2)^2)+((y1-y2)^2))\n      \n      return(res)\n    }\n    \n    \n    for(i in 1:8)\n    {\n      for(j in 1:7)\n      {\n        ED_matrices[j,1,i]<-euclidian_diat(curr[j,1,1],sliding_windows[j,1,i],curr[j,2,1],sliding_windows[j,2,i])\n        \n      }\n    }\n    \n    #contains the mean of the each euclidean matrix\n    ED_means<- array(,dim = c(8,1))\n    for (i in 1:8) {\n      ED_means[i,1]=mean(ED_matrices[,,i])\n    }\n    \n    #finding the min(ED_means)\n    matched_window_position=which(ED_means==min(ED_means))\n    \n    #matched_window\n    sliding_windows[,,matched_window_position]\n    matched_window=array(,dim = c(7,2))\n    matched_window=sliding_windows[,,matched_window_position]\n    matched_window\n    ################################################################################\n    \n    #variation\n    vc <- array(, dim = c(6,2))\n    vp <- array(, dim=c(6,2))\n    \n    for(i in 1:6)\n    {\n      for(j in 1:2)\n      {\n        vc[i,j]=curr[i,j,1]-curr[i+1,j,1]    \n      }\n    }\n    vc\n    \n    for(i in 1:6)\n    {\n      for(j in 1:2)\n      {\n        vp[i,j]=matched_window[i,j]-matched_window[i+1,j]    \n      }\n    }\n    vp\n    \n    class(vp)\n    colnames(vc)<-c('TMAX','TMIN')\n    colnames(vp)<-c('TMAX','TMIN')\n    colnames(curr) <- c('TMAX','TMIN')\n    \n    as.data.frame(vc)\n    vc[,1]\n    #mean of the variations\n    mean_TMAX1=mean(vc[,1])\n    mean_TMAX2=mean(vp[,1])\n    \n    mean_TMIN1=mean(vc[,2])\n    mean_TMIN2=mean(vp[,2])\n    \n    v_TMAX=(mean_TMAX1+mean_TMAX2)/2\n    v_TMIN=(mean_TMIN1+mean_TMIN2)/2\n    \n    res_TMAX <- as.data.frame(matrix(curr[,1,1]+v_TMAX, ncol = 1, nrow = 7))\n    is.data.frame(res_TMAX)\n    res_TMIN <- as.data.frame(matrix(curr[,2,1]+v_TMIN, ncol = 1, nrow = 7))\n    \n    res_TMAX\n    res_TMIN\n    colnames(res_TMAX)<-c('TMAX')\n    colnames(res_TMIN)<-c('TMIN')\n    \n    ################################################################################\n    #Actual Temperatures  \n    \n    actual_temp_data<- read.csv(\"bangalore_2016_csv.csv\" , sep = \",\") \n    actual_total_data<-actual_temp_data[, seq(1,3)]\n    names(actual_total_data)<- c('DATE','TMAX','TMIN')\n    actual_total_data\n    actual_total_data$TMAX<-as.numeric(substr(as.character(actual_total_data$TMAX),1,2))\n    actual_total_data$TMIN<-as.numeric(substr(as.character(actual_total_data$TMIN),1,2))\n    actual_total_data\n    \n    actual_cur_year_data<-actual_total_data[as.numeric(substr(y<-as.character((actual_total_data$DATE)),1,4)) %in% 2016,]\n    actual_cur_year_data\n    \n    \n    #getting the date format from the curr year data\n    actual_cur_month_date<-seq(predictionDate, by = 'day',length.out = 7)\n    actual_days<-as.numeric(paste(substr(y<-as.character(actual_cur_month_date),6,7),substr(y<-as.character(actual_cur_month_date),9,nchar(y)),sep=''))\n    \n    #matching the data\n    #var<- filter(prev_year_data,DATE=(DATE%/%10000==2015))\n    actual_cur_year_data$DATE<-as.numeric(substr(y<-as.character(actual_cur_year_data$DATE),5,nchar(y)))\n    actual_CD<-actual_cur_year_data[actual_cur_year_data$DATE %in% actual_days,c(2,3)]\n    \n    as.data.frame.matrix(actual_CD)\n    #centigarde conversion\n    for(i in 1:7)\n    {\n      actual_CD[i,1]=((as.numeric(actual_CD[i,1])-32)*(5/9))\n      actual_CD[i,2]=((as.numeric(actual_CD[i,2])-32)*(5/9))\n    }\n    as.data.frame.matrix(actual_CD)\n    actual_currYearData<-array(actual_CD[1:2])\n    names(actual_currYearData)<- c('Actual_TMAX','Actual_TMIN')\n    actual_currYearData\n    \n    ################################################################################\n    \n    dates<- seq(predictionDate, by = 'day',length.out = 7)\n    resultant_data_frame<-cbind(dates,res_TMAX,res_TMIN,actual_currYearData$Actual_TMAX,actual_currYearData$Actual_TMIN)\n    colnames(resultant_data_frame)<-c('Dates','P_TMAX','P_TMIN','A_TMAX','A_TMIN')\n    resultant_data_frame\n    write.csv(resultant_data_frame, file = \"predicted_temperature_data.csv\")\n    predicted_temperature=read.csv(\"predicted_temperature_data.csv\")\n    str(predicted_temperature)\n    predicted_temperature\n    \n    #drawing the comparision Plot\n    f <- list(\n      family = \"Courier New, monospace\",\n      size = 18,\n      color = \"Blue\"\n    )\n    x <- list(\n      title = \"Dates\",\n      titlefont = f\n    )\n    y <- list(\n      title = \"Temperature\",\n      titlefont = f\n    )\n\n  \n  output$predicted_tmax_tmin_plot<-renderPlotly({\n    plot_ly(predicted_temperature,x = Dates, y =P_TMAX , name=\"Predicted Max Temp\", line = list(shape = \"spline\"))  %>%\n      add_trace(x = Dates,y =P_TMIN, name=\"Predicted Min Temp\", line = list(shape = \"spline\")) %>%\n      layout(xaxis = x, yaxis = y)\n  })\n  ################################################################################\n  #Comparision of Minimum and maximum Temperature\n  \n  output$comparision_tmax_tmin_plot<-renderPlotly({\n    plot_ly(predicted_temperature,x = Dates, y =P_TMAX , name=\"Predicted Max Temp\", line = list(shape = \"spline\"))  %>%\n      add_trace(x = Dates,y =P_TMIN, name=\"Predicted Min Temp\", line = list(shape = \"spline\")) %>%\n      add_trace(x = Dates,y = A_TMIN, name=\"Actual Min Temp\", line = list(shape = \"spline\")) %>%\n      add_trace(x = dates,y = A_TMAX, name=\"Actual Max Temp\", line = list(shape = \"spline\")) %>%\n      layout(xaxis = x, yaxis = y)\n  })\n  ################################################################################\n  #Comparision of Maximum Temperature\n  \n  \n  output$comparision_tmax_plot<-renderPlotly({\n    plot_ly(predicted_temperature,x = Dates, y =P_TMAX , name=\"Predicted Max Temp\", line = list(shape = \"spline\"))  %>%\n      add_trace(x = dates,y = A_TMAX, name=\"Actual Max Temp\", line = list(shape = \"spline\")) %>%\n      layout(xaxis = x, yaxis = y)\n  })\n  ################################################################################\n  #Comparision of Minimum Temperature\n  \n  output$comparision_tmin_plot<-renderPlotly({\n    plot_ly(predicted_temperature,x = Dates, y =P_TMIN , name=\"Predicted Min Temp\", line = list(shape = \"spline\"))  %>%\n      add_trace(x = dates,y = A_TMIN, name=\"Actual Min Temp\", line = list(shape = \"spline\")) %>%\n      layout(xaxis = x, yaxis = y)\n  })\n  })\n})\n",
    "created" : 1465412703354.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3843776265",
    "id" : "F06B6487",
    "lastKnownWriteTime" : 1465531867,
    "last_content_update" : 1465531867684,
    "path" : "~/Documents/R Projects/AccuWeatherdashboard/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}